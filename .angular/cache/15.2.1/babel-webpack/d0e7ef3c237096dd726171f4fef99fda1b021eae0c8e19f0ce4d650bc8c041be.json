{"ast":null,"code":"import _asyncToGenerator from \"/home/olivio-gits/programacionIV/Peliculas/peliculas/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { BehaviorSubject } from 'rxjs';\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/auth';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/fire/compat/auth\";\nexport class DataServiceService {\n  constructor(http,\n  //requests\n  afAuth) {\n    this.http = http;\n    this.afAuth = afAuth;\n    this.initialState = {\n      peliculas: [],\n      user: {}\n    };\n    this.stateSubject = new BehaviorSubject(this.initialState); //definimos nuestro stateSubject\n    this.state$ = this.stateSubject.asObservable();\n  }\n  ngOnInit() {\n    this.checkAuth(); // Llamamos a la función checkAuth() cuando se inicie el servicio.\n    console.log('Inicia');\n  }\n  checkAuth() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const token = localStorage.getItem('authToken');\n      if (token) {\n        try {\n          const userCredential = yield firebase.auth().signInWithCustomToken(token);\n          const user = userCredential.user;\n          const obj = {\n            name: user?.displayName,\n            email: user?.email,\n            image: user?.photoURL\n          };\n          const currentState = _this.stateSubject.value;\n          _this.stateSubject.next({\n            ...currentState,\n            user: {\n              user: obj,\n              token: token\n            }\n          });\n        } catch (error) {\n          console.log('Error en la autenticación automática', error);\n        }\n      }\n    })();\n  }\n  signInWithGoogle() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      let obj;\n      const currentState = _this2.stateSubject.value;\n      const provider = new firebase.auth.GoogleAuthProvider();\n      _this2.afAuth.signInWithPopup(provider).then( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (result) {\n          console.log(result.user);\n          const token = result.user._delegate.stsTokenManager.accessToken; //recuperar token\n          if (result.user) {\n            obj = {\n              name: result.user.displayName,\n              email: result.user.email,\n              image: result.user.photoURL\n            };\n            yield localStorage.setItem('authToken', token); //guardar mi token\n            _this2.stateSubject.next({\n              ...currentState,\n              user: {\n                user: obj,\n                token: token\n              }\n            });\n          }\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    })();\n  }\n  signOut() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const currentState = _this3.stateSubject.value;\n      yield _this3.afAuth.signOut();\n      // Eliminar token de localStorage y propiedad user del servicio\n      localStorage.removeItem('authToken');\n      _this3.stateSubject.next({\n        ...currentState,\n        user: {\n          user: 'null',\n          token: 'null'\n        }\n      });\n    })();\n  }\n}\nDataServiceService.ɵfac = function DataServiceService_Factory(t) {\n  return new (t || DataServiceService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AngularFireAuth));\n};\nDataServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DataServiceService,\n  factory: DataServiceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["BehaviorSubject","firebase","DataServiceService","constructor","http","afAuth","peliculas","user","initialState","stateSubject","asObservable","ngOnInit","checkAuth","console","log","token","localStorage","getItem","userCredential","auth","signInWithCustomToken","obj","name","displayName","email","image","photoURL","currentState","value","next","error","signInWithGoogle","provider","GoogleAuthProvider","signInWithPopup","then","result","_delegate","stsTokenManager","accessToken","setItem","signOut","removeItem","factory","providedIn"],"sourceRoot":"","sources":["/home/olivio-gits/programacionIV/Peliculas/peliculas/src/app/services/data-service.service.ts"],"sourcesContent":["import { Injectable, OnInit } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/auth';\nimport { AngularFireAuth } from '@angular/fire/compat/auth';\nimport { DataService } from '../models/modelService';\nimport { User } from '../models/modelUser';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataServiceService implements OnInit {\n\n  constructor(\n    private http:HttpClient, //requests\n    private afAuth: AngularFireAuth\n  ) {}\n\n  private initialState:DataService={ //definimos nuestro estado en base a nuestro modelo DataService\n    peliculas:[],\n    user:{}\n  }\n  private stateSubject = new BehaviorSubject<DataService>(this.initialState); //definimos nuestro stateSubject\n  state$ = this.stateSubject.asObservable();\n\n  ngOnInit() {\n    this.checkAuth(); // Llamamos a la función checkAuth() cuando se inicie el servicio.\n    console.log('Inicia');\n    \n  }\n\n  async checkAuth() {\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      try {\n        const userCredential = await firebase.auth().signInWithCustomToken(token);\n        const user = userCredential.user;\n        const obj: User = {\n          name: user?.displayName,\n          email: user?.email,\n          image: user?.photoURL,\n        }\n        const currentState = this.stateSubject.value;\n        this.stateSubject.next({\n          ...currentState,\n          user:{\n            user: obj,\n            token: token\n          }\n        });\n      } catch (error) {\n        console.log('Error en la autenticación automática', error);\n      }\n    }\n  }\n\n  async signInWithGoogle() {\n    let obj:User;\n    const currentState = this.stateSubject.value;\n    const provider = new firebase.auth.GoogleAuthProvider();\n    this.afAuth.signInWithPopup(provider)\n    .then(async(result)=>{ //usuario logeado\n      console.log(result.user)\n      const token = (result.user as any)._delegate.stsTokenManager.accessToken; //recuperar token\n      if(result.user){\n        obj={\n          name: result.user.displayName,\n          email:result.user.email,\n          image:result.user.photoURL,\n        }\n        await localStorage.setItem('authToken', token); //guardar mi token\n        this.stateSubject.next({\n          ...currentState,\n          user:{\n            user: obj,\n            token: token\n          }\n        })  \n      }\n    }) \n  };\n\n  async signOut() {\n    const currentState = this.stateSubject.value;\n    await this.afAuth.signOut();\n    // Eliminar token de localStorage y propiedad user del servicio\n    localStorage.removeItem('authToken');\n    this.stateSubject.next({\n      ...currentState,\n      user:{\n        user:'null',\n        token:'null'\n      }\n    })\n  };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}